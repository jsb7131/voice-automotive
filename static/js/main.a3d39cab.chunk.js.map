{"version":3,"sources":["hooks/LayoutContext.tsx","hooks/VehiclesContext.tsx","hooks/useDealer.tsx","hooks/useSelection.tsx","components/Panel.tsx","components/CenteredTextBlock.tsx","components/Chin.tsx","components/VehicleBlock.tsx","hooks/useHover.tsx","components/VehiclesView.tsx","components/VehicleStack.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LayoutContext","React","createContext","collapsed","collapse","LayoutProvider","children","useState","setCollapsed","LayoutControl","value","Provider","automobiles","id","uniqueId","make","model","color","VehiclesContext","current","add","remove","clear","reset","useVehicles","useContext","VehiclesProvider","vehicles","setVehicles","memoVehicles","useRef","setVehiclesWithMemo","vehiclesArray","JSON","stringify","useEffect","setTimeout","vehicleControl","vehicle","filter","colors","useSelection","items","manySelect","selection","setSelection","SelectableElements","forEach","item","push","element","selected","selectElement","selectedElems","map","elem","selectOne","selectMany","Container","styled","div","p","isCollapsed","closedWidth","openWidth","Panel","percentHeight","fontSize","bgColor","borderRad","horiCenter","hoverColor","CenteredTextBlock","props","className","text","Chin","style","marginLeft","title","hovered","onClick","marginRight","cursor","width","height","borderBoxShadow","VehicleBlock","hover","setHovered","targetRef","onMouseEnter","onMouseLeave","node","addEventListener","removeEventListener","useHover","ref","dealerMake","dealerModel","VehiclesView","VehicleStack","pxSquare","blockFontSize","borderThickness","select","marginTop","vehicleColors","vehicleColor","backgroundColor","borderRadius","addVehicle","App","panel","dealer","useDealer","selectableVehicles","panelButtonText","length","overflow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a3d39cab.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react';\n\ntype Layout = {\n    collapsed: boolean,\n    collapse: (value: boolean) => void\n};\n\nconst LayoutContext = React.createContext<Layout>({\n    collapsed: true,\n    collapse: () => {}\n});\n\nexport const useLayout = () => useContext(LayoutContext);\n\nexport const LayoutProvider: React.FC = ({ children }) => {\n\n    const [collapsed, setCollapsed] = useState(true);\n\n    const collapse = (value: boolean) => setCollapsed(!value);\n\n    const LayoutControl = {\n        collapsed: collapsed,\n        collapse: collapse\n    };\n\n    return (\n        <LayoutContext.Provider value={LayoutControl}>\n            { children }\n        </LayoutContext.Provider>\n    );\n};","import React, { useContext, useState, useRef, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\n\ntype Vehicle = {id: string, make: string, model: string, color: string};\ntype AddVehicle = {make: string, model: string, color: string};\ntype AddFunc<T> = (item: T) => void;\ntype RemoveFunc = (id: string) => void;\ntype VoidFunc = () => void;\n\ntype Context = {\n    current: Vehicle[],\n    add: AddFunc<AddVehicle>,\n    remove: RemoveFunc,\n    clear: VoidFunc,\n    reset: VoidFunc\n};\n\n// Seeded vehicles\nconst automobiles: Vehicle[] = [\n    {id: uniqueId(), make: \"Tesla\", model: \"Model S\", color: \"black\"},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model 3\", color: \"red\"},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model X\", color: \"lightblue\"},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model Y\", color: \"white\"},\n    {id: uniqueId(), make: \"Tesla\", model: \"Roadster\", color: \"orange\"},\n    {id: uniqueId(), make: \"Tesla\", model: \"Cybertruck\", color: \"gray\"}\n];\n\nconst VehiclesContext = React.createContext<Context>({\n    current: [],\n    add: () => {},\n    remove: () => {},\n    clear: () => {},\n    reset: () => {}\n});\n\nexport const useVehicles = () => useContext(VehiclesContext);\n\nexport const VehiclesProvider: React.FC = ({ children }) => {\n    \n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\n\n    const memoVehicles = useRef(\"\");\n\n    // Hold the vehicles array state as a string in a ref for memoization\n    const setVehiclesWithMemo = (vehiclesArray: Vehicle[]) => {\n        setVehicles(vehiclesArray);\n        memoVehicles.current = JSON.stringify(vehiclesArray);\n    };\n\n    // Emulating initial fetch of vehicles / data on mount\n    useEffect(() => {\n        setTimeout(() => {\n            setVehiclesWithMemo(automobiles);\n        }, 1200);\n    }, []);\n\n    // Emulate an API fetch of current data (it could be the same exact\n    // data that is already currently held in the vehicles array state)\n    // If string of results is the same exact data as the current state,\n    // do not set new state / do not cause any unnecessary rendering\n    const fetchSeedVehicles = () => {\n        if (JSON.stringify(automobiles) !== memoVehicles.current) {\n            setVehiclesWithMemo(automobiles);\n        };\n    };\n\n    // Add vehicle to vehicles array state\n    const addVehicle = (vehicle: AddVehicle) => {\n        setVehiclesWithMemo([\n            {id: uniqueId(), ...vehicle},\n            ...vehicles\n        ]);\n    };\n\n    // Remove vehicle from vehicles array state\n    const removeVehicle = (id: string) => setVehiclesWithMemo(vehicles.filter(vehicle => vehicle.id !== id ));\n\n    // Remove all vehicles\n    const clearVehicles = () => setVehiclesWithMemo([]);\n\n    const vehicleControl = {\n        current: vehicles,\n        add: addVehicle,\n        remove: removeVehicle,\n        clear: clearVehicles,\n        reset: fetchSeedVehicles\n    };\n    \n    return (\n        <VehiclesContext.Provider value={vehicleControl}>\n            { children }\n        </VehiclesContext.Provider>\n    );\n};","import { useState, useEffect } from 'react';\nimport { uniqueId } from 'lodash';\n\ntype Colors = string[];\ntype Vehicle = {id: string, make: string, model: string, colors: Colors};\n\n// Seeded vehicles\nconst automobiles: Vehicle[] = [\n    {id: uniqueId(), make: \"Alta\", model: \"Redshift\", colors: [\"white\", \"lightblue\", \"orange\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model S\", colors: [\"white\", \"gray\", \"black\", \"red\", \"blue\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model 3\", colors: [\"white\", \"gray\", \"black\", \"red\", \"blue\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model X\", colors: [\"white\", \"gray\", \"black\", \"red\", \"lightblue\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Model Y\", colors: [\"white\", \"gray\", \"black\", \"red\", \"blue\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Roadster\", colors: [\"white\", \"gray\", \"black\", \"red\", \"blue\", \"orange\"]},\n    {id: uniqueId(), make: \"Tesla\", model: \"Cybertruck\", colors: [\"gray\"]}\n];\n\nexport const useDealer = () => {\n    \n    const [vehicles, setVehicles] = useState<Vehicle[]>([]);\n\n    // Emulating initial fetch of vehicles / data on mount\n    useEffect(() => {\n        setTimeout(() => {\n            setVehicles(automobiles);\n        }, 1200);\n    }, []);\n    \n    return vehicles;\n};","import { useState, useEffect } from 'react';\n\ntype ObjWithID = {id: string, [key: string]: any};\ntype SelectableElement = {element: ObjWithID, selected: boolean};\n\n// Incoming item object in items array must have an id property (type ObjWithID defined above)\n// Only one item will be selected at a time (all others set to false) with manySelect equal to false\n// Previously selected items will remain selected upon selecting a new item with manySelect equal to true\nexport const useSelection = (items: ObjWithID[], manySelect: boolean) => {\n\n    const [selection, setSelection] = useState<SelectableElement[]>([]);\n\n    useEffect(() => {\n        const SelectableElements: SelectableElement[] = [];\n        items.forEach(item =>\n            SelectableElements.push({\n                element: item,\n                selected: false\n            })\n        );\n        setSelection(SelectableElements);\n    }, [items]);\n\n    const selectOne = (id: string) => {\n        const newSelection = selection.map(elem => {\n            if (elem.element.id === id && elem.selected === false) {\n                return {...elem, selected: true};\n            } else {\n                return {...elem, selected: false};\n            };\n        });\n        return newSelection;\n    };\n\n    const selectMany = (id: string) => {\n        const newSelection = selection.map(elem => {\n            if (elem.element.id === id && elem.selected === false) {\n                return {...elem, selected: true};\n            } else if (elem.element.id === id && elem.selected === true) {\n                return {...elem, selected: false};\n            } else {\n                return elem;\n            };\n        });\n        return newSelection;\n    };\n\n    const selectElement = (id: string) => {\n        let selectedElems: SelectableElement[];\n        if (manySelect === false) {\n            selectedElems = selectOne(id);\n        } else {\n            selectedElems = selectMany(id);\n        };\n        setSelection(selectedElems);\n    };\n\n    return {\n        selection,\n        selectElement\n    };\n};","import React from 'react';\nimport styled from 'styled-components';\n\ntype PanelProps = {\n    isCollapsed: boolean,\n    closedWidth: number,\n    openWidth: number\n};\n\nconst Container = styled.div<PanelProps>`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    position: relative;\n    top: 0;\n    bottom: 0;\n    min-width: ${p => p.isCollapsed ? p.closedWidth : p.openWidth}px;\n    background: black;\n    overflow: auto;\n    padding-bottom: 20px;\n`;\n\nexport const Panel: React.FC<PanelProps> = ({ isCollapsed, closedWidth, openWidth, children }) => {\n    return (\n        <Container\n            isCollapsed={isCollapsed}\n            closedWidth={closedWidth}\n            openWidth={openWidth}\n        >\n            { children }\n        </Container>\n    );\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\n\ntype CTBProps = {\n    percentHeight: number,\n    fontSize: string,\n    bgColor: string,\n    borderRad: number,\n    horiCenter?: boolean,\n    hoverColor: string,\n    onClick?: () => void,\n    text: string\n};\n\ntype ContainerProps = {\n    percentHeight: number,\n    fontSize: string,\n    bgColor: string,\n    borderRad: number,\n    horiCenter?: boolean,\n    hoverColor: string\n};\n\nconst Container = styled.div<ContainerProps>`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    width: 100%;\n    height: ${p => p.percentHeight}%;\n    font-size: ${p => p.fontSize};\n    color: ${p => p.bgColor === \"black\" || p.bgColor === \"blue\" ? \"white\" : \"black\"};\n    background: ${p => p.bgColor};\n    border-top-left-radius: ${p => p.borderRad}px;\n    border-top-right-radius: ${p => p.borderRad}px;\n    border-bottom-left-radius: ${p => p.horiCenter ? p.borderRad : 0}px;\n    border-bottom-right-radius: ${p => p.horiCenter ? p.borderRad : 0}px;\n    ${p => p.horiCenter ?\n        `&:hover {\n            color: white;\n            background: ${p.hoverColor};\n        };`\n        :\n        \"\"\n    }\n`;\n\nexport const CenteredTextBlock: React.FC<CTBProps> = props => {\n    return (\n        <Container\n            className={props.horiCenter ? \"no-select-pointer\" : \"\"}\n            {...props}\n        >\n            {props.text}\n        </Container>\n    );\n};","import React from 'react';\nimport styled from 'styled-components';\n\ntype ChinProps = {\n    borderRad: number,\n    percentHeight: number,\n    title: string,\n    hovered?: boolean,\n    onClick?: () => void\n};\n\ntype ContainerProps = {\n    borderRad: number,\n    percentHeight: number\n};\n\nconst Container = styled.div<ContainerProps>`\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n    height: ${p => p.percentHeight}%;\n    border-top: 1px solid gray;\n    border-bottom-left-radius: ${p => p.borderRad}px;\n    border-bottom-right-radius: ${p => p.borderRad}px;\n    color: gray;\n    background: inherit;\n`;\n\nexport const Chin: React.FC<ChinProps> = props => {\n    return (\n        <Container\n            borderRad={props.borderRad}\n            percentHeight={props.percentHeight}\n        >\n            <div\n                style={{marginLeft: \"20px\"}}\n            >\n                {props.title}\n            </div>\n            {props.hovered &&\n                <div\n                    className=\"remove-button\"\n                    onClick={props.onClick}\n                    style={{\n                        marginRight: \"20px\",\n                        fontSize: \"14px\",\n                        cursor: \"pointer\"\n                    }}\n                >\n                    Remove from Collection\n                </div>\n            }\n        </Container>\n    );\n};\n\n","import React from 'react';\nimport styled from 'styled-components';\nimport { useHover } from '../hooks/useHover';\nimport { CenteredTextBlock } from './CenteredTextBlock';\nimport { Chin } from './Chin';\n\ntype VBProps = {\n    width: number,\n    height: number,\n    fontSize: string,\n    bgColor: string,\n    borderBoxShadow: string,\n    horiCenter?: boolean,\n    hoverColor: string,\n    onClick: () => void,\n    dealerMake: string,\n    dealerModel: string\n};\n\ntype ContainerProps = {\n    width: number,\n    height: number,\n    borderBoxShadow: string,\n    horiCenter?: boolean\n};\n\nconst Container = styled.div<ContainerProps>`\n    display: flex;\n    flex-direction: column;\n    width: ${p => p.width}px;\n    min-height: ${p => p.height}px;\n    height: ${p => p.height}px;\n    box-shadow: ${p => p.borderBoxShadow};\n    border-radius: 10px;\n    margin-top: 20px;\n    margin-right: ${p => p.horiCenter ? \"0\" : \"20px\"};\n    ${p => !p.horiCenter ? \"&:hover { box-shadow: 0 0 0 7px lightblue; };\" : \"\"}\n`;\n\nexport const VehicleBlock: React.FC<VBProps> = props => {\n    const hover = useHover();\n    return (\n        <Container\n            ref={hover.targetRef}\n            width={props.width}\n            height={props.height}\n            borderBoxShadow={props.borderBoxShadow}\n            horiCenter={props.horiCenter}\n        >\n            <CenteredTextBlock\n                percentHeight={!props.horiCenter ? 65 : 100}\n                fontSize={props.fontSize}\n                bgColor={props.bgColor}\n                borderRad={10}\n                horiCenter={props.horiCenter}\n                hoverColor={props.hoverColor}\n                onClick={props.horiCenter ? props.onClick : () => {}}\n                text={props.dealerMake + \" \" + props.dealerModel}\n            />\n            {!props.horiCenter &&\n                <Chin\n                    borderRad={10}\n                    percentHeight={35}\n                    title={props.dealerMake + \" \" + props.dealerModel}\n                    hovered={hover.hovered}\n                    onClick={props.onClick}\n                />\n            }\n        </Container>\n    );\n};","import { useState, useRef, useEffect } from 'react';\n\nexport const useHover = () => {\n    const [hovered, setHovered] = useState(false);\n    const targetRef = useRef<HTMLDivElement>(null);\n\n    const onMouseEnter = () => setHovered(true);\n    const onMouseLeave = () => setHovered(false);\n\n    useEffect(() => {\n        const node = targetRef.current;\n        if (node) {\n            node.addEventListener('mouseenter', onMouseEnter);\n            node.addEventListener('mouseleave', onMouseLeave);\n\n            return () => {\n                node.removeEventListener('mouseenter', onMouseEnter);\n                node.removeEventListener('mouseleave', onMouseLeave);\n            };\n        };\n    });\n\n    return {\n        hovered,\n        targetRef\n    };\n};","import React from 'react';\nimport { useVehicles } from '../hooks/VehiclesContext';\nimport { VehicleBlock } from './VehicleBlock';\n\nexport const VehiclesView: React.FC = () => {\n\n    const vehicles = useVehicles();\n\n    return (\n        <div id=\"garage-container\">\n            {vehicles.current.map(vehicle => \n                <VehicleBlock\n                    key={vehicle.id}\n                    width={400}\n                    height={350}\n                    fontSize={\"calc(10px + 2vmin)\"}\n                    bgColor={vehicle.color}\n                    borderBoxShadow={\"0 0 0 1px gray\"}\n                    hoverColor={\"darkblue\"}\n                    onClick={() => vehicles.remove(vehicle.id)}\n                    dealerMake={vehicle.make}\n                    dealerModel={vehicle.model}\n                />\n            )}\n        </div>\n    );\n};","import React from 'react';\nimport { VehicleBlock } from './VehicleBlock';\nimport { uniqueId } from 'lodash';\n\ntype Vehicle = {make: string, model: string, color: string};\n\ntype VSProps = {\n    collapsed: boolean,\n    dealerMake: string,\n    dealerModel: string,\n    vehicleColors: string[],\n    selected: boolean,\n    select: () => void,\n    addVehicle: (vehicle: Vehicle) => void\n};\n\nexport const VehicleStack: React.FC<VSProps> = props => {\n\n    const pxSquare = props.collapsed ? 100 : 150;\n    const blockFontSize = props.collapsed ? \"calc(5px + 2vmin)\" : \"calc(10px + 2vmin)\";\n    const borderThickness = props.collapsed ? 6 : 7;\n\n    return (\n        <>\n            <VehicleBlock\n                width={pxSquare}\n                height={pxSquare}\n                fontSize={blockFontSize}\n                bgColor={\"white\"}\n                borderBoxShadow={props.selected ? `0 0 0 ${borderThickness}px lightblue` : \"none\"}\n                horiCenter\n                hoverColor={\"green\"}\n                onClick={props.select}\n                dealerMake={props.dealerMake}\n                dealerModel={props.dealerModel}\n            />\n            {props.selected &&\n                <div style={{width: `${pxSquare}px`, marginTop: `${borderThickness}px`}}>\n                    {props.vehicleColors.map(vehicleColor =>\n                        <div\n                            key={uniqueId()}\n                            className=\"no-select-pointer color-select\"\n                            style={{width: \"100%\", height: \"20px\", backgroundColor: vehicleColor, borderRadius: \"7px\"}}\n                            onClick={() => props.addVehicle({make: props.dealerMake, model: props.dealerModel, color: vehicleColor})}\n                        >\n                        </div>\n                    )}\n                </div>\n            }\n        </>\n    );\n};","import React from 'react';\nimport './App.css';\nimport { useLayout } from './hooks/LayoutContext';\nimport { useVehicles } from './hooks/VehiclesContext';\nimport { useDealer } from './hooks/useDealer';\nimport { useSelection } from './hooks/useSelection';\nimport { Panel } from './components/Panel';\nimport { VehiclesView } from './components/VehiclesView';\nimport { VehicleStack } from './components/VehicleStack';\n\nexport default function App() {\n\n  const panel = useLayout();\n  const vehicles = useVehicles();\n  const dealer = useDealer();\n  const selectableVehicles = useSelection(dealer, false);\n\n  const panelButtonText = panel.collapsed ? \"Open\" : \"Close\";\n\n  return (\n    <div className=\"App\">\n        <header className=\"App-header\">\n          <Panel\n            isCollapsed={panel.collapsed}\n            closedWidth={150}\n            openWidth={300}\n          >\n            {dealer.length > 0 &&\n              <button\n                className=\"btn\"\n                style={{\n                  fontSize: `${panel.collapsed ? \"10px\" : \"14px\"}`,\n                  marginTop: \"10px\",\n                  cursor: \"pointer\"\n                }}\n                onClick={() => panel.collapse(panel.collapsed)}\n              >\n                {panelButtonText}\n              </button>\n            }\n            {!panel.collapsed && <h2 style={{color: \"white\"}}>Dealership</h2>}\n            {selectableVehicles.selection.map(vehicle =>\n              <VehicleStack\n                key={vehicle.element.id}\n                collapsed={panel.collapsed}\n                dealerMake={vehicle.element.make}\n                dealerModel={vehicle.element.model}\n                vehicleColors={vehicle.element.colors}\n                selected={vehicle.selected}\n                select={() => selectableVehicles.selectElement(vehicle.element.id)}\n                addVehicle={vehicles.add}\n              />\n            )}\n          </Panel>\n          <div style={{overflow: \"auto\"}}>\n            <div id=\"garage-top-bar\">\n              <div style={{marginRight: \"80px\"}}>Collection</div>\n              {vehicles.current.length > 0 &&\n                <div\n                  className=\"top-nav-btn no-select-pointer\"\n                  onClick={vehicles.clear}\n                >\n                  Clear\n                </div>\n              }\n              {dealer.length > 0 &&\n                <div\n                  className=\"top-nav-btn no-select-pointer\"\n                  onClick={vehicles.reset}\n                >\n                  Reset\n                </div>\n              }\n            </div>\n            <VehiclesView/>\n          </div>\n        </header>\n    </div>\n  );\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { LayoutProvider } from './hooks/LayoutContext';\nimport { VehiclesProvider } from './hooks/VehiclesContext';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <LayoutProvider>\n      <VehiclesProvider>\n        <App />\n      </VehiclesProvider>\n    </LayoutProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}